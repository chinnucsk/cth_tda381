%% To compile and run.

erl -sname moose -setcookie monkey
Erlang R13B04 (erts-5.7.5) [source] [64-bit] [smp:8:8] [rq:8] [async-threads:0] [kernel-poll:false]

Eshell V5.7.5  (abort with ^G)
(moose@fugu)1> c(cth_rsa).
{ok,cth_rsa}
(moose@fugu)2> c(public).
{ok,public}

%% REMEMBER, always run the init function to start the crypto app!

(moose@fugu)3> cth_rsa:init().
ok

%% now you can start to generate keys.

(moose@fugu)7> {E1, D1, N1, P1, Q1} = cth_rsa:gen_key(80).
{65537,210046402283240746635873,1047227924417166415840843,
 1025755077233,1020933698171}

(moose@fugu)8> Plaintext = "poop".
"poop"
(moose@fugu)9> Pt = cth_rsa:int_code(Plaintext).
1886351216

%% encrypt

(moose@fugu)10> Ct = cth_rsa:rsa(Pt, E1, N1).
937814851505629646636792

%% decrypt

(moose@fugu)13> Pt2 = cth_rsa:rsa(Ct, D1, N1).
1886351216
(moose@fugu)14> cth_rsa:int_decode(Pt2).
"poop"

%% crack a code

(moose@fugu)16> cth_rsa:rho(N1).
1025755077233
(moose@fugu)17> PF = cth_rsa:rho(N1).
1025755077233
(moose@fugu)18> N1 rem PF.
0
(moose@fugu)19> QF = N1 div PF.
1020933698171

%% lets distribute.

%% start a node on another machine. Put the hostname of the master in
%% /etc/hosts

$ erl -sname sausage -setcookie monkey
Erlang R13B04 (erts-5.7.5) [source] [64-bit] [smp:8:8] [rq:8] [async-threads:0] [kernel-poll:false]

Eshell V5.7.5  (abort with ^G)
(sausage@fugu)1>  cth_rsa:init().
ok

%% back to master

(moose@fugu)20> cth_rsa:start_master().
<0.77.0>
(moose@fugu)21> net_kernel:allow([sausage@fugu]).
ok

%% slave

(sausage@fugu)2> net_adm:ping(moose@fugu).
pong
(sausage@fugu)3> nodes().
[moose@fugu]

%% This machine has 8 cores, start 8 slaves.

(sausage@fugu)4> cth_rsa:whos_boss().
<6490.77.0>
(sausage@fugu)5> cth_rsa:slaves(8, moose@fugu).
[<0.53.0>,<0.54.0>,<0.55.0>,<0.56.0>,<0.57.0>,<0.58.0>,
 <0.59.0>,<0.60.0>]

%% back to master, do some magic.

(moose@fugu)22> cth_rsa:dist_gen_key(4096).
{65537,
 45142638657434046444888663273933342195995797036412138047905256429319404724236080323623890740158399860558972392156555646624302142146470927525228019998865663686394112043962458313860530779931351981750584729582520938785132308393719803032744119094428197807515398199060383415645030714149353132190045782652329411700777855464907023512376836375823985516618831110684371318683083800659669334446601208606824114602106656547571254638920307643747875719258888012810450835498902611991974675147420208375801759474646948059858781414943367049966761118451510120437671530361710421882222696621883399288273136843764396182413990036703506238154773264366250026725706406184734500941185293451301289546798987870007625152537589291369464910161848056173845830322751434963616150114807742801876188530370463459100399737175714143236093005576533172862617611122259228765650170268699541648560971703420349490036060308939415087782942705214990256649651315912112848757835480132769509368694643088919619144886704587651085540829713194428828030256176637147285178637366379995264028117404619555167238565320480988838368041215870203659187467365324564539532042162566795006712850287541341332212267718754594959151315931851381349810757042154809994179788567884074636688153747763443827278593,

 18674959960069617027074913579036092793953041674071941168653210158256284415997829584123979697720511756886178672206177657305794254955324258618253812906475580027638112645299507049434992675505941152595469459321128166995008192872033694685647439649645696015427345221902239272558013937873551654504023237105577359979965684808962775155153527387766321434068794362389141715876297902853655442558163821356802682381037636749663570471336818000445417431889954824901770075963614311213946004729955822493929933974233860613743482003382619367600596654051430680665491347568879939618434722385644159273703126897116999183237979403528343238481,
}

%% Lets try some of the challenges.
%% They exist from 80 to 256 bits. Have fun!

(moose@fugu)23> {C2, E2, N2} = public:chal(80).
{577083856964599403382997,65537,782656130558653165730327}

(moose@fugu)25> {P2, Q2}  = cth_rsa:factor(N2).
{1083545630759,722310263953}

(moose@fugu)28> {_, D2, _, _, _} = cth_rsa:key_from_pq(P2, Q2).
{65537,291927142094727138699233,782656130558653165730327,
 1083545630759,722310263953}

(moose@fugu)29> cth_rsa:int_decode(cth_rsa:rsa(C2, D2, N2)).
"format c:\n"

%% Send your decrypted results to carl-johan@klarna.com
%% A Quadratic Sieve or a MPQS would probably be a lot nicer.
%% Feel free to improve it.

